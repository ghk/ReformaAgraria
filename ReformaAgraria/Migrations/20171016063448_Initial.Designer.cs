// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using ReformaAgraria.Models;
using System;

namespace ReformaAgraria.Migrations
{
    [DbContext(typeof(ReformaAgrariaDbContext))]
    [Migration("20171016063448_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ReformaAgraria.Models.MeetingReport", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AgendaOfDiscussion");

                    b.Property<string>("Attachment");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("DescriptionOfResult");

                    b.Property<int>("LevelOfMeeting");

                    b.Property<string>("ListOfParticipants");

                    b.Property<string>("NameOfActivity");

                    b.Property<string>("Place");

                    b.HasKey("Id");

                    b.ToTable("MeetingReport");
                });

            modelBuilder.Entity("ReformaAgraria.Models.ObjectSubjectTora", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Administrative");

                    b.Property<string>("Concession");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<int>("Field");

                    b.Property<string>("ListOfTenants");

                    b.Property<string>("Livelihood");

                    b.Property<string>("NIK");

                    b.Property<string>("Notes");

                    b.Property<string>("ResumeOfCase");

                    b.Property<double>("Size");

                    b.Property<double>("SizeOfAPL");

                    b.Property<double>("SizeOfHL");

                    b.Property<double>("SizeOfHP");

                    b.Property<double>("SizeOfHPK");

                    b.Property<double>("SizeOfHPT");

                    b.Property<int>("Status");

                    b.Property<string>("Subject");

                    b.Property<int>("fkRegionId");

                    b.HasKey("Id");

                    b.HasIndex("fkRegionId");

                    b.ToTable("ObjectSubjectTora");
                });

            modelBuilder.Entity("ReformaAgraria.Models.PoliciesDocuments", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Attachment");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("TitleOfDocument");

                    b.HasKey("Id");

                    b.ToTable("PoliciesDocuments");
                });

            modelBuilder.Entity("ReformaAgraria.Models.ProfileOfVillage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("History");

                    b.Property<string>("Potential");

                    b.Property<string>("TenurialCondition");

                    b.Property<int>("fkRegionId");

                    b.HasKey("Id");

                    b.HasIndex("fkRegionId");

                    b.ToTable("ProfileOfVillage");
                });

            modelBuilder.Entity("ReformaAgraria.Models.ProposalOfActDocumentCheckList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ListOfPsObjectAndCustomaryForest");

                    b.Property<bool>("ListOfPsSubjectAndCustomaryForest");

                    b.Property<bool>("ListOfToraObjectForestArea");

                    b.Property<bool>("ListOfToraSubject");

                    b.Property<bool>("ListOfToraSubjectForestArea");

                    b.Property<bool>("ListProposalFromCommunity");

                    b.Property<bool>("ListToraObject");

                    b.Property<bool>("MapOfPsObjectAndCustomaryForest");

                    b.Property<bool>("MapOfToraObject");

                    b.Property<bool>("MapOfToraObjectForestArea");

                    b.Property<int>("fkRegionId");

                    b.HasKey("Id");

                    b.HasIndex("fkRegionId");

                    b.ToTable("ProposalOfActDocumentCheckList");
                });

            modelBuilder.Entity("ReformaAgraria.Models.ReformaAgrariaUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ReformaAgraria.Models.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Type");

                    b.Property<int?>("fkParentId");

                    b.HasKey("RegionId");

                    b.HasIndex("fkParentId");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("ReformaAgraria.Models.TipologyOfAgrarianProblem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Codefication");

                    b.Property<bool>("CommunalSubjectDataCheckList");

                    b.Property<int>("ContactPerson");

                    b.Property<string>("CoordinateOfLocation");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<bool>("HistoryOfLandTenureDataCheckList");

                    b.Property<bool>("IndividualSubjectDataCheckList");

                    b.Property<string>("MainProblem");

                    b.Property<bool>("ObjectDataCheckList");

                    b.Property<double>("ProposedSize");

                    b.Property<int>("ProposedTreatment");

                    b.Property<double>("Size");

                    b.Property<double>("SizeOFField");

                    b.Property<double>("SizeOfFarm");

                    b.Property<double>("SizeOfForest");

                    b.Property<double>("SizeOfGarden");

                    b.Property<double>("SizeOfHabitation");

                    b.Property<double>("SizeOfMere");

                    b.Property<double>("SizeOfPaddyField");

                    b.Property<int>("TotalFamily");

                    b.Property<int>("TotalPeople");

                    b.Property<int>("TypeOfLand");

                    b.Property<int>("fkRegionId");

                    b.HasKey("Id");

                    b.HasIndex("fkRegionId");

                    b.ToTable("TipologyOfAgrarianProblem");
                });

            modelBuilder.Entity("ReformaAgraria.Models.ToraMapAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Attachment");

                    b.Property<int>("BorderSettingStatus");

                    b.Property<string>("Coordinate");

                    b.Property<double>("Size");

                    b.Property<int>("StageOfToraSettingProcess");

                    b.Property<int>("fkRegionId");

                    b.HasKey("Id");

                    b.HasIndex("fkRegionId");

                    b.ToTable("ToraMapAttribute");
                });

            modelBuilder.Entity("ReformaAgraria.Models.ToraSubmission", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Attachment");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.HasKey("Id");

                    b.ToTable("ToraSubmission");
                });

            modelBuilder.Entity("ReformaAgraria.Models.VillageMapAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Attachment");

                    b.Property<int>("BorderSettingStatus");

                    b.Property<string>("Coordinate");

                    b.Property<double>("Size");

                    b.Property<int>("StageOfBorderSettingProcess");

                    b.Property<int>("fkRegionId");

                    b.HasKey("Id");

                    b.HasIndex("fkRegionId");

                    b.ToTable("VillageMapAttribute");
                });

            modelBuilder.Entity("ReformaAgraria.Models.WorkCalendar", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AgendaOfActivity");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("ImplementationOfActivity");

                    b.Property<string>("Notes");

                    b.Property<string>("Place");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("TitleOfActivity");

                    b.HasKey("Id");

                    b.ToTable("WorkCalendar");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ReformaAgraria.Models.ReformaAgrariaUser")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ReformaAgraria.Models.ReformaAgrariaUser")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ReformaAgraria.Models.ReformaAgrariaUser")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ReformaAgraria.Models.ReformaAgrariaUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReformaAgraria.Models.ObjectSubjectTora", b =>
                {
                    b.HasOne("ReformaAgraria.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("fkRegionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReformaAgraria.Models.ProfileOfVillage", b =>
                {
                    b.HasOne("ReformaAgraria.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("fkRegionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReformaAgraria.Models.ProposalOfActDocumentCheckList", b =>
                {
                    b.HasOne("ReformaAgraria.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("fkRegionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReformaAgraria.Models.Region", b =>
                {
                    b.HasOne("ReformaAgraria.Models.Region", "Parent")
                        .WithMany()
                        .HasForeignKey("fkParentId");
                });

            modelBuilder.Entity("ReformaAgraria.Models.TipologyOfAgrarianProblem", b =>
                {
                    b.HasOne("ReformaAgraria.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("fkRegionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReformaAgraria.Models.ToraMapAttribute", b =>
                {
                    b.HasOne("ReformaAgraria.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("fkRegionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReformaAgraria.Models.VillageMapAttribute", b =>
                {
                    b.HasOne("ReformaAgraria.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("fkRegionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
