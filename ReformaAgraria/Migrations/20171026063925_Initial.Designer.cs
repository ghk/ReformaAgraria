// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using ReformaAgraria.Models;
using System;

namespace ReformaAgraria.Migrations
{
    [DbContext(typeof(ReformaAgrariaDbContext))]
    [Migration("20171026063925_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ReformaAgraria.Models.ActProposalDocumentCheckList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("FkRegionId");

                    b.Property<bool>("ProposalFromCommunityList");

                    b.Property<bool>("PsObjectAndCustomaryForestList");

                    b.Property<bool>("PsObjectAndCustomaryForestMap");

                    b.Property<bool>("PsSubjectAndCustomaryForestList");

                    b.Property<bool>("ToraObjectForestAreaList");

                    b.Property<bool>("ToraObjectForestAreaMap");

                    b.Property<bool>("ToraObjectList");

                    b.Property<bool>("ToraObjectMap");

                    b.Property<bool>("ToraSubjectForestAreaList");

                    b.Property<bool>("ToraSubjectList");

                    b.Property<string>("fkRegionId");

                    b.HasKey("Id");

                    b.HasIndex("FkRegionId");

                    b.ToTable("ProposalOfActDocumentCheckList");
                });

            modelBuilder.Entity("ReformaAgraria.Models.Coordinate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<decimal>("Latitude");

                    b.Property<decimal>("Longitude");

                    b.HasKey("Id");

                    b.ToTable("Coordinate");
                });

            modelBuilder.Entity("ReformaAgraria.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Agenda");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("Notes");

                    b.Property<string>("Place");

                    b.Property<int>("RegionType");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("WorkCalendar");
                });

            modelBuilder.Entity("ReformaAgraria.Models.MeetingAttendee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<int?>("MeetingMinuteId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("MeetingMinuteId");

                    b.ToTable("MeetingAttendee");
                });

            modelBuilder.Entity("ReformaAgraria.Models.MeetingMinute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Attachment");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Description");

                    b.Property<int>("FkEventId");

                    b.HasKey("Id");

                    b.HasIndex("FkEventId");

                    b.ToTable("MeetingReport");
                });

            modelBuilder.Entity("ReformaAgraria.Models.PoliciesDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Attachment");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("PoliciesDocuments");
                });

            modelBuilder.Entity("ReformaAgraria.Models.ReformaAgrariaUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ReformaAgraria.Models.Region", b =>
                {
                    b.Property<string>("Id");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("FkParentId");

                    b.Property<bool>("IsKelurahan");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FkParentId");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("ReformaAgraria.Models.TipologyOfAgrarianProblem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Codefication");

                    b.Property<bool>("CommunalSubjectDataCheckList");

                    b.Property<string>("ContactPerson");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<decimal>("FarmSize");

                    b.Property<decimal>("FieldSize");

                    b.Property<int?>("FkCoordinateId");

                    b.Property<string>("FkRegionId");

                    b.Property<decimal>("ForestSize");

                    b.Property<decimal>("GardenSize");

                    b.Property<decimal>("HabitationSize");

                    b.Property<bool>("IndividualSubjectDataCheckList");

                    b.Property<bool>("LandTenureHistoryDataCheckList");

                    b.Property<int>("LandType");

                    b.Property<string>("MainProblem");

                    b.Property<decimal>("MereSize");

                    b.Property<bool>("ObjectDataCheckList");

                    b.Property<decimal>("PaddyFieldSize");

                    b.Property<decimal>("ProposedSize");

                    b.Property<int>("ProposedTreatment");

                    b.Property<decimal>("Size");

                    b.Property<int>("TotalFamily");

                    b.Property<int>("TotalPeople");

                    b.HasKey("Id");

                    b.HasIndex("FkCoordinateId");

                    b.HasIndex("FkRegionId");

                    b.ToTable("TipologyOfAgrarianProblem");
                });

            modelBuilder.Entity("ReformaAgraria.Models.ToraMapAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Attachment");

                    b.Property<int>("BorderSettingStatus");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<int?>("FkCoordinateId");

                    b.Property<string>("FkRegionId");

                    b.Property<decimal>("Size");

                    b.Property<int>("ToraSettingProcessStage");

                    b.HasKey("Id");

                    b.HasIndex("FkCoordinateId");

                    b.HasIndex("FkRegionId");

                    b.ToTable("ToraMapAttribute");
                });

            modelBuilder.Entity("ReformaAgraria.Models.ToraObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("FkRegionId");

                    b.Property<int>("LandStatus");

                    b.Property<string>("LandTenureHistory");

                    b.Property<int>("LandType");

                    b.Property<string>("Livelihood");

                    b.Property<int>("ProposedTreatment");

                    b.Property<int>("RegionalStatus");

                    b.Property<decimal>("Size");

                    b.Property<string>("TotalTenants");

                    b.HasKey("Id");

                    b.HasIndex("FkRegionId");

                    b.ToTable("ToraObject");
                });

            modelBuilder.Entity("ReformaAgraria.Models.ToraSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<int?>("Age");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<int>("EducationalAttainment");

                    b.Property<int>("FkToraObjectId");

                    b.Property<int>("Gender");

                    b.Property<string>("LandLocation");

                    b.Property<string>("LandStatus");

                    b.Property<int>("MaritalStatus");

                    b.Property<string>("Name");

                    b.Property<string>("Notes");

                    b.Property<string>("PlantTypes");

                    b.Property<decimal>("Size");

                    b.Property<int>("TotalFamilyMembers");

                    b.HasKey("Id");

                    b.HasIndex("FkToraObjectId");

                    b.ToTable("ToraSubject");
                });

            modelBuilder.Entity("ReformaAgraria.Models.ToraSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Attachment");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.HasKey("Id");

                    b.ToTable("ToraSubmission");
                });

            modelBuilder.Entity("ReformaAgraria.Models.VillageMapAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Attachment");

                    b.Property<int>("BorderSettingProcessStage");

                    b.Property<int>("BorderSettingStatus");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<int?>("FkCoordinateId");

                    b.Property<string>("FkRegionId");

                    b.Property<decimal>("Size");

                    b.HasKey("Id");

                    b.HasIndex("FkCoordinateId");

                    b.HasIndex("FkRegionId");

                    b.ToTable("VillageMapAttribute");
                });

            modelBuilder.Entity("ReformaAgraria.Models.VillageProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("FkRegionId");

                    b.Property<string>("History");

                    b.Property<string>("Potential");

                    b.Property<string>("TenurialCondition");

                    b.HasKey("Id");

                    b.HasIndex("FkRegionId");

                    b.ToTable("ProfileOfVillage");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ReformaAgraria.Models.ReformaAgrariaUser")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ReformaAgraria.Models.ReformaAgrariaUser")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ReformaAgraria.Models.ReformaAgrariaUser")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ReformaAgraria.Models.ReformaAgrariaUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReformaAgraria.Models.ActProposalDocumentCheckList", b =>
                {
                    b.HasOne("ReformaAgraria.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("FkRegionId");
                });

            modelBuilder.Entity("ReformaAgraria.Models.MeetingAttendee", b =>
                {
                    b.HasOne("ReformaAgraria.Models.MeetingMinute")
                        .WithMany("MeetingAttendees")
                        .HasForeignKey("MeetingMinuteId");
                });

            modelBuilder.Entity("ReformaAgraria.Models.MeetingMinute", b =>
                {
                    b.HasOne("ReformaAgraria.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("FkEventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReformaAgraria.Models.Region", b =>
                {
                    b.HasOne("ReformaAgraria.Models.Region", "Parent")
                        .WithMany()
                        .HasForeignKey("FkParentId");
                });

            modelBuilder.Entity("ReformaAgraria.Models.TipologyOfAgrarianProblem", b =>
                {
                    b.HasOne("ReformaAgraria.Models.Coordinate", "Coordinate")
                        .WithMany()
                        .HasForeignKey("FkCoordinateId");

                    b.HasOne("ReformaAgraria.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("FkRegionId");
                });

            modelBuilder.Entity("ReformaAgraria.Models.ToraMapAttribute", b =>
                {
                    b.HasOne("ReformaAgraria.Models.Coordinate", "Coordinate")
                        .WithMany()
                        .HasForeignKey("FkCoordinateId");

                    b.HasOne("ReformaAgraria.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("FkRegionId");
                });

            modelBuilder.Entity("ReformaAgraria.Models.ToraObject", b =>
                {
                    b.HasOne("ReformaAgraria.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("FkRegionId");
                });

            modelBuilder.Entity("ReformaAgraria.Models.ToraSubject", b =>
                {
                    b.HasOne("ReformaAgraria.Models.ToraObject", "ToraObject")
                        .WithMany()
                        .HasForeignKey("FkToraObjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReformaAgraria.Models.VillageMapAttribute", b =>
                {
                    b.HasOne("ReformaAgraria.Models.Coordinate", "Coordinate")
                        .WithMany()
                        .HasForeignKey("FkCoordinateId");

                    b.HasOne("ReformaAgraria.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("FkRegionId");
                });

            modelBuilder.Entity("ReformaAgraria.Models.VillageProfile", b =>
                {
                    b.HasOne("ReformaAgraria.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("FkRegionId");
                });
#pragma warning restore 612, 618
        }
    }
}
